Tim Benton
Full Stack ILC
Summer 2021
Week 4 summary

All code and weekly summaries are documented @ https://github.com/humantl1/full-stack

Week 4
This week I studied intermediate CSS concepts. I'll simply list them with a short overview
to cover what I learned this week:
  - Box model : spatial sub-components each element is composed of.
    - Radiating out from the center, this is value -> padding -> border -> margin -> outline
  - Position : essential for the positioning of elements on a page. Values are:
    - static : default positioning
    - relative : relative positioning according to default static position
    - absolute : ironically, this is relative to the parent positioning property. 
      - parent positioning must be set to relative
    - fixed : fixes positiong to viewport position. So when scrolling, element remains "fixed"
    - sticky : fixed to viewport relative to parent element. Only works intuitively relative to the top of viewport
    - z-index : layer positioning of element
  - Text overflow : values are hidden, visible, auto and scroll. Essentially, determines when scroll bars are available
  - Specificity : very important concept only touched on briefly. Properties are applied to elements based on how specifically
    selectors are applied
  - Advanced selectors : allow for selecting elements relative to other elements, e.g. select immediate descendents of specific class
  - Pseudo selectors : select according to specific state or aspect of an element, e.g. the 2nd child of a parent or mouse hovered over
  - Pseudo elements : give css some html functionality, e.g. create element after specified element
  - Transitions : allow for interpolating between states, e.g. fade in color on mouse hover
  - Animations : little scripts that essentially apply transitions to any element
  - Flexbox : layout module that creates flexible, responsive layout structures in a page
    - Gives elements dynamic space slots
    - Complex topic, demonstrated exctensivly in my weekly project.
  - Grid : another layout module. different use-case then Flexbox.
    - As the name suggests, allows defining a dynamic grid, and then selecting which element goes in which grid location

To demonstrate my learning I continued extending my css document with examples of each concept learned. I also completed a
small project coding the fairly complex front page of a website. For the design I found a site I liked and reproduced it,
since the purpose was attempting the CSS and not design. It took everything I have learned to date to complete it, including
using flexbox, grid, animations and more. I've included an image of the page in my submission. The code is in my repo. 

My challenges were learning finer control of manipulating the css elements. In particular, precise positioning was difficult when
elements were deeply nested, and aligning text to the center end of an element was strangely difficult. 

I am most curious how html and css is professionally structured. I know this can be viewed in a browser, but this professional 
code is hard to parse because it always uses additional frameworks and is quite dense.
