Tim Benton
Full Stack ILC
Summer 2021
Weekly Summaries

Week 1
- Study basic html
  - DOM : HTML is encoded as a tree structure with each element as a node
    - An HTML doc is parsed and translated as a DOM by the browser
  - Doctypes : informs browser of type of document contained
  - Elements : objects in html doc tree
  - Attributes : keywords used to control element behavior
  - Block vs Inline : Block elements essentially have a newline char encoded
  - Headers : Block element of header text
  - Line Breaks : breaks inline element to new line
  - Strong & Emphasis : visual and auditory elements
  - Underline : purely visual element
  - Links (external, internal, relative)
    - External : link to external webpage
    - Internal : link to location in current doc
    - Relative : link to page filepath relative to current doc
  - Images : can reference file or link. 
    - Alternate display text, title, width and height are attributes
  - Div : the most common element. Block element and can have most other elements embedded inside
  - List (ordered & unordered) : automated numbered or bulletted lists
  - Tables : Once used for site formatting, now most commonly used for emails and pdfs. Non-responsive
  - Responsiveness : The ability of a website to dynamically format based on viewport display

- Code example snips of html for practice
- Make a master html doc of all html learned to date
  - Include relavent theory using comments

Week 2
- Study basic web concepts
  - Web requests : aka "handshakes", the exchange of information between users and servers
    - the size is variable depending on the information being exchanged
  - Request types : 
    - GET : the "standard" request. Receives information
    - POST : saving information
    - DELETE : deleting info
    - PUT/PATCH : update info
  - Domain Name Mapping : websites point to IP addresses, which communicate with servers
  - Request Lifecycle : when a request to access a site is sent, the server may accept the request and 
    output the relevent data as a response 
    - Then the browser downloads the data and saves them on the local computer (cache),
      piecing it together to render the content
  - Server response : can be any format, but is typically HTML/CSS/JavaScript or plain text or json
    - For APIs, requests are generally smallish and similar to plain text
    - Browsers download responses and the browser engine handles parsing and extracting the relevant data
- Study intermediate HTML
  - Favicons : tab icons
  - Pathing file structure
  - Inline CSS
  - HTML Classes : similar to C family classes. Seems to essentially consist of a number of fields. Maybe more like a struct
  - HTML IDs : unique identifier
  - Code Formatting
  - HTML Entities : instead of escape charaters, html uses this "entity" concept
  - Forms (buttons, fields, etc)
  - Embedded video
- Code a simple website with HTML and a little CSS

Week 3
- Study CSS concepts
  - CSS : Cascading Style Sheets
    - Can be "applied" 3 ways:
      - Inline : with style HTML attribute
      - Internal : with <style> element
      - External : with .css files
  - 
