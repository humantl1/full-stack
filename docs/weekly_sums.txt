Tim Benton
Full Stack ILC
Summer 2021
Weekly Summaries

Week 1
- Study basic html
  - DOM (Document Object Model) : HTML is encoded as a tree structure with each element as a node
    - An HTML doc is parsed and translated as a DOM by the browser
  - Doctypes : informs browser of type of document contained
  - Elements : objects in html doc tree
  - Attributes : keywords used to control element behavior
  - Block vs Inline : Block elements essentially have a newline char encoded
  - Headers : Block element of header text
  - Line Breaks : breaks inline element to new line
  - Strong & Emphasis : visual and auditory elements
  - Underline : purely visual element
  - Links (external, internal, relative)
    - External : link to external webpage
    - Internal : link to location in current doc
    - Relative : link to page filepath relative to current doc
  - Images : can reference file or link. 
    - Alternate display text, title, width and height are attributes
  - Div : the most common element. Block element and can have most other elements embedded inside
  - List (ordered & unordered) : automated numbered or bulletted lists
  - Tables : Once used for site formatting, now most commonly used for emails and pdfs. Non-responsive
  - Responsiveness : The ability of a website to dynamically format based on viewport display

- Code example snips of html for practice
- Make a master html doc of all html learned to date
  - Include relavent theory using comments

Week 2
- Study basic web concepts
  - Web requests : aka "handshakes", the exchange of information between users and servers
    - the size is variable depending on the information being exchanged
  - Request types : 
    - GET : the "standard" request. Receives information
    - POST : saving information
    - DELETE : deleting info
    - PUT/PATCH : update info
  - Domain Name Mapping : websites point to IP addresses, which communicate with servers
  - Request Lifecycle : when a request to access a site is sent, the server may accept the request and 
    output the relevent data as a response 
    - Then the browser downloads the data and saves them on the local computer (cache),
      piecing it together to render the content
  - Server response : can be any format, but is typically HTML/CSS/JavaScript or plain text or json
    - For APIs, requests are generally smallish and similar to plain text
    - Browsers download responses and the browser engine handles parsing and extracting the relevant data
- Study intermediate HTML
  - Favicons : tab icons
  - Pathing file structure
  - Inline CSS
  - HTML Classes : similar to C family classes. Seems to essentially consist of a number of fields. Maybe more like a struct
  - HTML IDs : unique identifier
  - Code Formatting
  - HTML Entities : instead of escape charaters, html uses this "entity" concept
  - Forms (buttons, fields, etc)
  - Embedded video
- Code a simple website with HTML and a little CSS

Week 3
- Study basic CSS concepts
  - CSS : Cascading Style Sheets
    - Can be "applied" 3 ways:
      - Inline : with style HTML attribute
      - Internal : with <style> element
      - External : with .css files
  - Class : containers that store one or more CSS rules that can be applied to one or more HTML elements
  - ID : unique container that stores rules similar to class attribute. Has advanced applications in regards to JavaScript
  - Syntax :
    - Selector : denote which element(s) CSS rule(s) will be applied to
      - These selectors can be grouped to appy to multiple element types or nested to apply to specific nested element schemes
    - Declaration : this is the rule that will be applied to selected elements
      - Property : the type of rule to be applied, e.g. font-size
      - Value : the value of the property to be applied, e.g. the specific font point size to be applied
  - Some specific CSS rules that stand out:
    - Link states : rules that apply to specific states links can have, e.g. hovered over or previously visited
    - Measurement systems : just as there are multiple measurement systems for physical objects, CSS has multiple systems as well
      - px : absolute pixels size
      - em : relative to size of direct or nearest parent element
      - rem : relative to size of root element
    - Display Types : This seemed maybe the most important basic rule. Changes the the behavior of an element in regards to default
        element width and which rules can be applied to an element. Gives the div element great flexibility.
    - There are many text-specific rules; effectively CSS allows complete control over text display
    - Padding/Margin : CSS uses a space format that has a border-area around an element and then a padding buffer between the element
        and border and a margin buffer outside of the border. These can be modified or eleminated.
- Code CSS & HTML
  - Constructed a html/css document that contains both examples and documentation of concepts learned this week
  - Constructed a website homepage using CSS following a requested design specification.

Week 4
- Study intermediate CSS concepts
  - Box model : spatial sub-components each element is composed of.
    - Radiating out from the center, this is value -> padding -> border -> margin -> outline
  - Position : essential for the positioning of elements on a page. Values are:
    - static : default positioning
    - relative : relative positioning according to default static position
    - absolute : ironically, this is relative to the parent positioning property. 
      - parent positioning must be set to relative
    - fixed : fixes positiong to viewport position. So when scrolling, element remains "fixed"
    - sticky : fixed to viewport relative to parent element. Only works intuitively relative to the top of viewport
    - z-index : layer positioning of element
  - Text overflow : values are hidden, visible, auto and scroll. Essentially, determines when scroll bars are available
  - Specificity : very important concept only touched on briefly. Properties are applied to elements based on how specifically
    selectors are applied
  - Advanced selectors : allow for selecting elements relative to other elements, e.g. select immediate descendents of specific class
  - Pseudo selectors : select according to specific state or aspect of an element, e.g. the 2nd child of a parent or mouse hovered over
  - Pseudo elements : give css some html functionality, e.g. create element after specified element
  - Transitions : allow for interpolating between states, e.g. fade in color on mouse hover
  - Animations : little scripts that essentially apply transitions to any element
  - Flexbox : layout module that creates flexible, responsive layout structures in a page
    - Gives elements dynamic space slots
    - Complex topic, demonstrated exctensivly in my weekly project.
  - Grid : another layout module. different use-case then Flexbox.
    - As the name suggests, allows defining a dynamic grid, and then selecting which element goes in which grid location
- Code CSS & HTML
  - Extend html/css reference document to include more advanced css concepts
  - Construct a complex website front page using animations, grid, flexbox and other intermediate CSS functionality.

Week 5
 - study responsive css techniques
    - viewport meta tag
      - mobile devices generally render pages in a virtual viewport that is larger
        than the physical viewport and then shrink it down. This helps make sites
        not optimized for small viewports look better. However, this makes site that 
        ARE optimized look worse. The viewport meta tag can be set to render the page
        at a specified ratio/fixed size.
    - Media query syntax : this is a toggle selector that can trigger when specified
      conditions are met. Used to dynamically restructure a page as a function of
      viewport size.
      - multiple media queries : multiple media queries can be set to allow stepped
        functionality and ranges.
    - mobile-first paradigm : a web development concept advocating for design to be
      mobile-centric first and formost
    - responsive images : by specifying image size as a function of screen width,
      both small and large displays can be accomodated
    - responsive embeds : embedded video can be enclosed in a div container which
      is then set to respond dynamically to various display sizes
    - responsive layout techniques : flexbox and grid should be the foundation for 
      responsively designed sites if vanilla css is used, with media queries being set
      for more extensive layout-shifts
